from django.db import models
from trim.models import fields

class ContentLink(models.Model):
    """A Single link generated by the owner for access to a filepath."""
    uuid = fields.str_uuid()


class ContentPublish(models.Model):
    """A single item published.

    A Published item may be any of:

    + Public (Anyone)
        + User or Anon
    + Link (User owned)
        + User or Anon
    + User (Target Email)

    A publish can be a combination. However when _public_ the other
    methods are void.
    """
    uuid = fields.str_uuid()
    fullpath = fields.text()
    user = fields.user_fk(nil=True)
    links = fields.m2m(ContentLink, nil=True)
    is_public = fields.boolean_false()

    created, updated = fields.dt_cu_pair()

    def user_can_access(self, user):
        """Given a user, assert if they have access.
        """
        if self.is_public:
            return True

        return False

    @classmethod
    def get_public_published(cls):
        return cls.objects.filter(is_public=True)

from trim.models import AutoModelMixin


class FilePublishedAutoMixin(AutoModelMixin):

    @property
    def is_public(self):
        return ContentPublish.objects.filter(fullpath=self.store_path).exists()

    class Meta:
        model_name = "file.FileUnit"


